/* Generated By:JavaCC: Do not edit this line. ASParserTokenManager.java */
package com.flagstone.translate;
import java.util.*;
import java.io.*;

public class ASParserTokenManager implements ASParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x18c00000180000L) != 0L)
            return 12;
         if ((active0 & 0xff80000000000200L) != 0L || (active1 & 0x72eff7L) != 0L)
         {
            jjmatchedKind = 87;
            return 54;
         }
         if ((active1 & 0x41008L) != 0L)
         {
            jjmatchedKind = 87;
            return 6;
         }
         if ((active1 & 0x90000L) != 0L)
         {
            jjmatchedKind = 87;
            return 2;
         }
         if ((active0 & 0x2000000400000L) != 0L)
            return 56;
         if ((active1 & 0x1000000000L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active1 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x180000000000200L) != 0L || (active1 & 0x7e36ebL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 54;
         }
         if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0xc914L) != 0L)
            return 54;
         return -1;
      case 2:
         if ((active0 & 0x180000000000000L) != 0L || (active1 & 0x12808L) != 0L)
            return 54;
         if ((active0 & 0x200L) != 0L || (active1 & 0x7e57e3L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 2;
            }
            return 54;
         }
         return -1;
      case 3:
         if ((active1 & 0x5e53e2L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
            return 54;
         }
         if ((active0 & 0x200L) != 0L || (active1 & 0x200401L) != 0L)
            return 54;
         return -1;
      case 4:
         if ((active1 & 0x5453c0L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
            return 54;
         }
         if ((active1 & 0xa0022L) != 0L)
            return 54;
         return -1;
      case 5:
         if ((active1 & 0x445140L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
            return 54;
         }
         if ((active1 & 0x100280L) != 0L)
            return 54;
         return -1;
      case 6:
         if ((active1 & 0x5140L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
            return 54;
         }
         if ((active1 & 0x440000L) != 0L)
            return 54;
         return -1;
      case 7:
         if ((active1 & 0x4100L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
            return 54;
         }
         if ((active1 & 0x1040L) != 0L)
            return 54;
         return -1;
      case 8:
         if ((active1 & 0x4100L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 8;
            return 54;
         }
         return -1;
      case 9:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 9;
            return 54;
         }
         if ((active1 & 0x100L) != 0L)
            return 54;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x40004000000000L, 0x0L);
      case 37:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 38:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x48000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 90);
      case 41:
         return jjStopAtPos(0, 91);
      case 42:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 43:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x8000000080000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 95);
      case 45:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x10000000100000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 100, 19);
      case 47:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 96);
      case 59:
         return jjStopAtPos(0, 94);
      case 60:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x82001000000L, 0x0L);
      case 61:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x20000200000000L, 0x0L);
      case 62:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x301006000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 97);
      case 91:
         return jjStopAtPos(0, 98);
      case 93:
         return jjStopAtPos(0, 99);
      case 94:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x180000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x220040L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400084L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x41008L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x110L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000000000200L, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0xc000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x90000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x402L);
      case 123:
         return jjStopAtPos(0, 92);
      case 124:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x90000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 93);
      case 126:
         return jjStopAtPos(0, 42);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 43:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 45:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 60:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 61:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000000L, active1, 0L);
      case 62:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100006000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x222000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 60, 54);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 54);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400a80L);
      case 102:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 63, 54);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80002L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40400L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 110:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x4100L);
      case 111:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 54);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x48L);
      case 113:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 54);
         break;
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 54);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10020L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 54);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0x1000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 124:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 25);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 54);
         break;
      case 62:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 54);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 54);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100002L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x41040L);
      case 114:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 54);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 54);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200101L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20600L);
      case 119:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 54);
         break;
      case 121:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x440020L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x21000L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 54);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 104:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 54);
         break;
      case 108:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4002L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100140L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active1, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active1, 0x100000L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 54);
         break;
      case 104:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x4040L);
      case 107:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 54);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active1, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active1, 0x1080L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active1, 0x400000L);
      case 119:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(3, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 54);
         break;
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x440000L);
      case 110:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 54);
         return jjMoveStringLiteralDfa6_0(active1, 0x140L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa7_0(active1, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active1, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x1000L);
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 54);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x40L);
      case 121:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 54);
         return jjMoveStringLiteralDfa8_0(active1, 0x100L);
      case 110:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 54);
         break;
      case 118:
         return jjMoveStringLiteralDfa8_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 72, 54);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 78, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 77;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(54);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(54);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(54);
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(62, 63);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(3, 9);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  else if (curChar == 46)
                     jjCheckNAdd(19);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 8:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar != 46)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(22);
                  break;
               case 23:
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 24:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 27:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 30:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 38:
                  if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  break;
               case 39:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 41:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 42:
                  if (curChar == 39 && kind > 15)
                     kind = 15;
                  break;
               case 43:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 45:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 41);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 55:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 57:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 58:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 59:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 60:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddStates(50, 52);
                  break;
               case 64:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 65:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 66:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(3, 9);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 71:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(72);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(76);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(0);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 115)
                     jjCheckNAdd(0);
                  break;
               case 5:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(10);
                  break;
               case 15:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjAddStates(53, 54);
                  break;
               case 20:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjAddStates(55, 56);
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 25:
                  if (curChar == 92)
                     jjAddStates(57, 62);
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 32:
                  if (curChar == 117)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 34:
                  if (curChar == 120)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 36:
                  if (curChar == 88)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 39:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 40:
                  if (curChar == 92)
                     jjAddStates(63, 68);
                  break;
               case 41:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 47:
                  if (curChar == 117)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(38, 41);
                  break;
               case 49:
                  if (curChar == 120)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 51:
                  if (curChar == 88)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(54);
                  break;
               case 57:
                  jjAddStates(0, 2);
                  break;
               case 62:
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  jjCheckNAddTwoStates(65, 63);
                  break;
               case 70:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjAddStates(69, 70);
                  break;
               case 74:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjAddStates(71, 72);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(15, 17);
                  break;
               case 39:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(12, 14);
                  break;
               case 57:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 62:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(65, 63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 77 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   57, 58, 60, 68, 12, 13, 69, 70, 73, 74, 56, 61, 39, 40, 42, 24, 
   25, 27, 24, 25, 29, 27, 24, 25, 33, 27, 24, 25, 35, 27, 24, 25, 
   37, 27, 39, 40, 44, 42, 39, 40, 48, 42, 39, 40, 50, 42, 39, 40, 
   52, 42, 63, 64, 66, 16, 17, 21, 22, 26, 28, 30, 32, 34, 36, 41, 
   43, 45, 47, 49, 51, 71, 72, 75, 76, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\156\165\154\154", null, 
null, null, null, null, null, null, null, "\75", "\53\75", "\55\75", "\52\75", 
"\57\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\46\75", "\174\75", 
"\136\75", "\46\46", "\174\174", "\41", "\75\75", "\76", "\74", "\76\75", "\74\75", 
"\41\75", "\46", "\174", "\136", "\176", "\74\74", "\76\76\76", "\76\76", "\53", "\55", 
"\52", "\57", "\45", "\53\53", "\55\55", "\75\75\75", "\41\75\75", "\141\144\144", 
"\141\156\144", "\157\162", "\145\161", "\156\145", "\154\145", "\147\164", "\147\145", 
"\151\146", "\145\154\163\145", "\167\150\151\154\145", "\144\157", "\146\157\162", 
"\151\156", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\144\145\154\145\164\145", "\151\156\163\164\141\156\143\145\157\146", "\162\145\164\165\162\156", 
"\167\151\164\150", "\156\145\167", "\146\165\156\143\164\151\157\156", "\166\141\162", 
"\157\156\103\154\151\160\105\166\145\156\164", "\157\156", "\164\162\171", "\143\141\164\143\150", 
"\146\151\156\141\154\154\171", "\164\150\162\157\167", "\163\167\151\164\143\150", "\143\141\163\145", 
"\144\145\146\141\165\154\164", null, null, null, "\50", "\51", "\173", "\175", "\73", "\54", "\72", "\77", 
"\133", "\135", "\56", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffca701L, 0x1ffcffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[77];
private final int[] jjstateSet = new int[154];
protected char curChar;
public ASParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ASParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 77; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
