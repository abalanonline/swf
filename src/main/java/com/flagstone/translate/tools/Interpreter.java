/*
 * Interpreter.java
 * Translate AS1
 *
 * A compiler for ActionScript 1.x
 * Copyright (c) 2003-2006 Flagstone Software Ltd. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later 
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 * For more information please contact:
 * 
 * Stuart MacKay
 * Flagstone Software Ltd
 * 92 High Street
 * Wick, Caithness KW1 4LY
 * Scotland
 * 
 * www.flagstonesoftware.com
 */
package com.flagstone.translate.tools;

import java.util.*;
import java.io.*;

import com.flagstone.translate.*;

/**
 * Interpreter.java - provides a simple command-line interpreter that allows the 
 * grammar to be tested and sample swf files to be generated.
 *
 * Synopsis:
 *
 * java -classpath &gt;classpath&gt; Interpreter 
 *     [ --file filename ] 
 *     [ --dump ]
 *     [ --encode filename ]
 *
 * where
 *
 *   &lt;classpath&gt; is the path where the parser jar is located.
 *
 *   --file filename   is a text file containing ActionScript statements.  
 *
 *   --dump            instructs the class to print out a description of the tree 
 *                     of ASNodes generated by the parser.
 *
 *   --encode filename is the name of the file where the compiled ActionScript
 *                     will be written.  
 *
 * If a file is not specified then the parser will read ActionScript statements 
 * from the standard input stream. The parser will continue to read statements 
 * typed at the keyboard until the stream is closed by typing ctrl-d.
 */
public final class Interpreter extends Tool
{    
    public static void main (String args[]) 
    {
        new Interpreter(args);
    }
    
    private ASNode root = null;

    /**
     * Constructs a new Interpreter, parsing the array of arguments which defines
     * whether the interpreter should parse a named file or read ActionScript 
     * statements from the standard input.
     * 
     * The node tree constructed can be dumped to display its structure.
     * 
     * @param args an array of strings that specify the options used to control
     * the operation of the interpreter.
     */
    public Interpreter(String[] args)
    {
        super(args);
        
        boolean readFile = options.containsKey("file");
        boolean showNodes = options.containsKey("dump");
        boolean encodeFile = options.containsKey("encode");

        ASParser parser = new ASParser();
            
        System.out.println("");
        
        try 
        {
            if (readFile)
            {
                String scriptFile = getOption("file");
                
                System.out.println("Reading ActionScript from " + scriptFile);
                
                root = parser.parse(scriptFile);
            }
            else
            {
                System.out.println("Type in ActionScript statements, type Ctrl-D to finish.");
                
                root = parser.parse((String)null);
            }
            
            if (showNodes)
            {
                System.out.println("Dumping the contents of the node tree...");
                
                root.displayTree("");
            }
            
            if (encodeFile)
            {
                String swfFile = getOption("encode");
                
                if (root.getType() == ASNode.Array)
                    frameScript(swfFile);
                else if (root.getType() == ASNode.Button)
                    buttonScript(swfFile);
                else if (root.getType() == ASNode.MovieClip)
                    movieClipScript(swfFile);
            }
        }
        catch (ParseException e)
        {
            System.err.println(parser.getError());
            System.err.println("    File: " + parser.getFilename() + ", Line: " + parser.getLineNumber());
            System.err.println("    " + parser.getLine());            
        }
    }
    /*
     * Returns the first value associated with a given option. If an option is 
     * not in the options table then null is returned. If no argument was specified
     * for the options then the empty string is return, otherwise the first 
     * element in the argument array is returned.
     * 
     * NOTE: this method does not currently support options specified with more 
     * than one argument.
     *  
     * @param name the name of the option to search the options table for.
     * 
     * @return an argument associated with the option. Returns null if the option
     * is not present in the table. Returns an empty string if the option was present
     * but no argument was associated with it.
     */
    private String getOption(String name)
    {
        String value = null;
        
        if (options.containsKey(name))
        {
            ArrayList values = (ArrayList) options.get(name);
            
            if (values.size() > 0)
                value = (String)values.get(0);
            else
                value = "";
        }
        return value;
     }

    /*
     * Returns the contents of a file specified on the command line. If an error
     * occurs while reading the file then an empty string is returned.
     * 
     * @param fileName the name of the file containing the ActionScript statements
     * to be parsed.
     */
    private static String contentsOfFile(String fileName)
    {
        String script = "";        
        FileInputStream fileContents = null;

        try {
            File aFile = new File(fileName);
            byte[] fileIn = new byte[(int)aFile.length()];
            
            fileContents = new FileInputStream(aFile);
            fileContents.read(fileIn);
            
            script = new String(fileIn);
        }
        catch (Exception e) 
        {
            script = "";
        }
        finally 
        {
            if (fileContents != null)
                try { fileContents.close(); } catch (IOException e) {}
        }
        return script;
    }
    
    /*
     * Generates a sample swf file containing a single frame which executes the 
     * compiled actions when displayed.
     */
    private void frameScript(String filename)
    {
        try
        {
            FileOutputStream out = new FileOutputStream(filename);
                    
            byte[] data = root.encode(5);
                    
            int fileLength = 35 + data.length + 1;
            int actionLength = data.length + 1;

            /*
             * The signature identifies the file as containing Flash 5.
             */
            int[] signature = { 0x46, 0x57, 0x53, 0x05 };
                    
            for (int i=0; i<signature.length; i++)
                out.write(signature[i]);

            // Write out length of file
                    
            for (int i=0; i<4; i++, fileLength >>>= 8)
                out.write(fileLength);
                
            /*
             * The rest of the header sets the frame size to 200 x 200 
             * pixels, plays at 12 frames per second, contains 1 frame,
             * sets the background colour to be white and writes out
             * the first 2 bytes of the DoAction tag.
             */
                     
            int[] header = { 
                0x68, 0x00, 0x1f, 0x40, 0x00, 0x07, 0xd0, 0x00,
                0x00, 0x0c, 0x01, 0x00, 0x43, 0x02, 0xff, 0xff,
                0xff, 0x3f, 0x03
            };
                    
            for (int i=0; i<header.length; i++)
                out.write(header[i]);
                        
            for (int i=0; i<4; i++, actionLength >>>= 8)
                out.write(actionLength);

            out.write(data);
            out.write(0);
                    
            // ShowFrame
                    
            out.write(64);
            out.write(0);
                    
            // End of Movie
                    
            out.write(0);
            out.write(0);
        }
        catch (IOException e)
        {
            System.err.println("Could not write Flash file: ");            
        }
    }
    
    /*
     * Generates a sample swf file containing the compiled actions for a button
     * No button is displayed in the movie however the file may be browsed by 
     * a suitable viewer or parsed using Transform to inspect the byte-codes and
     * actions generated when the script is compiled.
     */
    private void buttonScript(String filename)
    {
        try
        {
            FileOutputStream out = new FileOutputStream(filename);
                    
            byte[] data = root.encode(5);
                    
            int fileLength = 47 + data.length;
            int actionLength = data.length + 13;

            /*
             * The signature identifies the file as containing Flash 5.
             */
            int[] signature = { 0x46, 0x57, 0x53, 0x05 };
                    
            for (int i=0; i<signature.length; i++)
                out.write(signature[i]);

            // Write out length of file
                    
            for (int i=0; i<4; i++, fileLength >>>= 8)
                out.write(fileLength);
                
            /*
             * The rest of the header sets the frame size to 200 x 200 
             * pixels, plays at 12 frames per second, contains 1 frame,
             * sets the background colour to be white and writes out
             * the first bytes of the DefineButton2 tag.
             */
                     
            int[] header = { 
                0x68, 0x00, 0x1f, 0x40, 0x00, 0x07, 0xd0, 0x00,
                0x00, 0x0c, 0x01, 0x00, 0x43, 0x02, 0xff, 0xff,
                0xff, 0xbf, 0x08, 
                
            };
                    
            for (int i=0; i<header.length; i++)
                out.write(header[i]);
                        
            for (int i=0; i<4; i++, actionLength >>>= 8)
                out.write(actionLength);

            int[] body = { 
                 0x01, 0x00, 0x00, 0x08, 0x00, 0x01, 0x01, 0x00,
                 0x01, 0x00, 0x00, 0x00, 0x00,
            };
            
            for (int i=0; i<body.length; i++)
                out.write(body[i]);        
            
            out.write(data);
                    
            // ShowFrame
                    
            out.write(64);
            out.write(0);
                    
            // End of Movie
                    
            out.write(0);
            out.write(0);
        }
        catch (IOException e)
        {
            System.err.println("Could not write Flash file: ");            
        }
    }

    /*
     * Generates a sample swf file containing the compiled actions for a movie
     * clip. Nothing is displayed in the movie however the file may be browsed by 
     * a suitable viewer or parsed using Transform to inspect the byte-codes and
     * actions generated when the script is compiled.
     */
    private void movieClipScript(String filename)
    {
        try
        {
            FileOutputStream out = new FileOutputStream(filename);
                    
            byte[] data = root.encode(5);
                    
            int fileLength = 38 + data.length;
            int actionLength = data.length + 7;

            /*
             * The signature identifies the file as containing Flash 5.
             */
            int[] signature = { 0x46, 0x57, 0x53, 0x05 };
                    
            for (int i=0; i<signature.length; i++)
                out.write(signature[i]);

            // Write out length of file
                    
            for (int i=0; i<4; i++, fileLength >>>= 8)
                out.write(fileLength);
                
            /*
             * The rest of the header sets the frame size to 200 x 200 
             * pixels, plays at 12 frames per second, contains 1 frame,
             * sets the background colour to be white and writes out
             * the first bytes of the PlaceObject2 tag.
             */
                     
            int[] header = { 
                0x68, 0x00, 0x1f, 0x40, 0x00, 0x07, 0xd0, 0x00,
                0x00, 0x0c, 0x01, 0x00, 0x43, 0x02, 0xff, 0xff,
                0xff, 0xbf, 0x06, 
                
            };
                    
            for (int i=0; i<header.length; i++)
                out.write(header[i]);
                        
            for (int i=0; i<4; i++, actionLength >>>= 8)
                out.write(actionLength);

            int[] body = { 
                 0x82, 0x01, 0x00, 0x01, 0x00, 
            };
            
            for (int i=0; i<body.length; i++)
                out.write(body[i]);        
            
            out.write(data);
                    
            out.write(0);
            out.write(0);

            // ShowFrame
                    
            out.write(64);
            out.write(0);
                    
            // End of Movie
                    
            out.write(0);
            out.write(0);
        }
        catch (IOException e)
        {
            System.err.println("Could not write Flash file: ");            
        }
    }
}
