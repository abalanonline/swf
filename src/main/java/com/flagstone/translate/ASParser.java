/* Generated By:JavaCC: Do not edit this line. ASParser.java */
package com.flagstone.translate;

import java.util.*;
import java.io.*;

/**
 * The ASParser framework is a collection of classes used to implement a compiler 
 * for Macromedia's ActionScript, Version 1.0. ActionScript statements are parsed 
 * to generate the byte-codes and actions that will be executed by the Flash Player.
 * 
 * The parser translates ActionScript into a tree of ASNode objects which are then
 * encoded to the byte-codes and actions that will be executed by the Flash Player.
 *
 * <pre>
 *     String script = "gotoFrame(1)";
 * 
 *     byte[] encodedActions = parser.parse(script).encode(swfVersion);
 * </pre>
 *
 * The version of Flash (swf) that the script is being encoded for must be passed
 * to the root ASNode when the tree of nodes is encoded. The format of the data 
 * structures that represent clip and button events changed when version 6 and 
 * version 7 of the Flash File Format Specification was released.
 *
 * <b>Search Paths</b><br/>
 * ActionScript supports #include directives which allow scripts to be nested.
 * When the script is preprocessed the current working directory is checked for 
 * for the file specified. The parser also supports search paths which is a list
 * of directories which should also be checked for the file.
 *
 * Paths may be specified as an array of path names or as a single string with 
 * paths separated by the system-dependent path separator character - ';' on Windows
 * platforms and ':' for Unix compatible platforms. The string is split into 
 * separate paths and added to the array of paths searched.
 *
 * The directories are searched in the order they were added to the array of paths
 * maintained by the parser.
 *
 * <b>Error Handling</b><br/>
 * If an error occurs while parsing the script an exception is thrown. The ParseException
 * contains detailed information on the token sequence that caused the parser to 
 * generate the error. This informatrion can be hard to decipher and should not 
 * be presented to an end-user of an application. The ASParser object generates 
 * more user/script-writer friendly information that can be used to identify 
 * the line in a script that generated the error.
 *
 * <pre>
 *    try 
 *    {
 *        String script = "on(mouseDown) { startDrag(); }";
 *        ...
 *        ASNode root = parser.parse(script);
 *        ...
 *    }
 *    catch (ParseException e)
 *    {
 *        String filename = parser.getFilename();
 *        String line = parser.getLine();
 *        String message = parser.getError();
 *        int lineNumber = parser.getLineNumber();
 *        ...
 *    }
 * </pre> 
 *
 */
public final class ASParser extends Object implements ASParserConstants {
    private final boolean Debug = false;

    /**
     * Keys that identify the different types of error generated while #include 
     * directives are being processed and the script is being parsed. The key 
     * can be used with a ResourceBundle object to generate a localized string 
     * that describes the error in detail.
     */
    public static String[] errorKeys =  {
        /**
        * A FileNotFound error is reported when the file referenced in  a #include 
        * directive cannot be opened.
        */
        "FileNotFound",
        /**
         * ReadError is reported when an error occurs while reading the file referenced
         * in a #include directive.
         */
           "ReadError",
        /**
         * A #include directive must be the only ActionScript present on a given line
         * (though the directive may be split over two lines). If other statements or
         * directives are present then a SingleDirective error is reported.
         */
        "SingleDirective",
        /**
         * A QuoteFileName error is reported if the filename refernced in a #include 
         * directive is not enclosed in double quotes.
         */
        "QuoteFileName",
           /**
         * A ParseError error is used to report any exception thrown by the parser
         * while parsing a script.
         */
        "ParseError",
        /**
         * An OnOnly error occurs when on statements are mixed with other statements 
         * in a script. 
         */
        "OnOnly",
        /**
         * An OnClipEventOnly error occurs when onClipEvent statements are mixed with
         * other statements in a script. 
         */
        "OnClipEventOnly",
        /**
         * An UnknownMovieClipEvent error occurs when an unknown movie clip event
         * name is found in an OnClipEvent() statement. 
         */
        "UnknownMovieClipEvent",
        /**
         * An UnknownButtonEvent error occurs when an unknown button event name is
         * in an On() statement. 
         */
        "UnknownButtonEvent",
        /**
         * A IncorrectArgumentCount error occurs when the wrong number of arguments are 
         * supplied to one of the built-in functions in Flash.
         */
        "IncorrectArgumentCount",
        /**
         * A CannotUseBreak error occurs when a break statement is used outside of a 
         * loop statement.
         */
           "CannotUseBreak",
        /**
         * A CannotUseContinue error occurs when a continue statement is used outside of a 
         * loop statement.
         */
        "CannotUseContinue",
        /**
         * A CannotUseReturn error occurs when a return statement is used outside of a 
         * function definition.
         */
        "CannotUseReturn",
    };

    private final static String separator = System.getProperty("line.separator");
    private final static String wordDelimiters = " \t";

    /*
     * The following attributes are used to report errors that occur while processing
     * directives or parsing a script.
     *
     * _filename contains the name of the file which contains the line of code that
     * triggered the error. Note if an error occurs because the file specified in the 
     * #include directive cannot be found or an error occurs then _filename is the 
     * name of the file containing the directive and not the name of the file being
     * included.
     *
     * _lineNumber is the line in the file referenced in _filename which contains the 
     * code that triggered the error.
     *
     * _line is the line of code that triggered the error.
     *
     * _error is a keyword that identifies th type of error reported. The key may be
     * used with a ResourceBundle to generate a localized description, reporting the 
     * error in full.
     */
    private String _filename = "";
    private int _lineNumber = 0;
    private String _line = "";
    private String _error = "";

    /*
     * The following arrays are used to map the line number reported when a 
     * parseException is thrown (after all #include directives have been processed) 
     * to the original file, line number and line of code. The arrays are updated
     * using the processDirectives method. 
     */
    private ArrayList files = new ArrayList();
    private ArrayList lines = new ArrayList();
    private ArrayList codes = new ArrayList();

    /*
     * The pathNames array allows multiple directories to be searched when 
     * looking for a file specified in a #include directive.
     */
    private ArrayList pathNames = new ArrayList();

    /**
     * Constructs a new parser object. The current working directory "." is added 
     * to the list of directories that will be searched when looking for a file.
     */
    public ASParser()
    {
        this(System.in);

        pathNames.add(".");
    }

    /**
     * Returns the array of path names used when searching for a file.
     *
     * @return an array of strings containing the names of directories to search.
     */
    public ArrayList getPaths()
    {
        return pathNames;
    }

    /**
     * Sets the array of path names used when searching for a file.
     *
     * @param paths an array of strings containing the names of directories to search.
     */
    public void setPaths(ArrayList paths)
    {
        pathNames = paths;
    }

    /**
     * Sets the array of path names used when searching for a file. The string should 
     * contains paths which contain the system-dependent separator and pathSeparator
     * characters.
     *
     * @param paths a string containing the names of directories to search.
     */
    public void setPaths(String paths)
    {
        StringTokenizer pathTokenizer = new StringTokenizer(paths, File.pathSeparator, false);

        pathNames.clear();

        while (pathTokenizer.hasMoreTokens())
            pathNames.add(pathTokenizer.nextToken());
    }

    /**
     * Add a path to the array of pathnames. The path should contain the system-dependent
     * separator.
     *
     * @param path a string containing the path to a directory.
     */
    public void add(String path)
    {
        pathNames.add(path);
    }

    /**
     * Returns the name of the file that contained the line of code that generated 
     * an error while parsing a script.
     *
     * @return the name of the file which contained the line of code or an empty 
     * string if the line was in the 'root' script.
     */
    public String getFilename()
    {
        return _filename;
    }

    /**
     * Returns the number of the the line of code that generated an error 
     * parsing a script.
     *
     * @return the number of the line which that triggered the error.
     */
    public int getLineNumber()
    {
        return _lineNumber;
    }

    /**
     * Returns the line of code that generated an error while parsing a script.
     *
     * @return the line which that triggered the error.
     */
    public String getLine()
    {
        return _line;
    }

    /**
     * Returns the key identifying the type of error that occured while
     * of parsing a script.
     *
     * @return the line which that triggered the error.
     */
    public String getError()
    {
        return _error;
    }

    /**
     * Parses the ActionScript string, script. Any nested files specified
     * using #include directives are loaded before the complete script is 
     * parsed. The filenames and line numbers of #include'd scripts are 
     * tracked so any syntax errors are reported accurately.
     *
     * The character used used in the script is assumed to be UTF-8.
     *
     * @param script a String containing the ActionScript code to parse.
     *
     * @throws ParseException if a parsing error occurs.
     */
    public ASNode parse(String script) throws ParseException
    {
        ASNode root = null;

        files.clear();
        lines.clear();
        codes.clear();

        try
        {
            if (script != null && script.length() > 0)
            {
                StringBuffer buffer = new StringBuffer();
                byte[] bytes = null;

                processDirectives("", script, buffer);

                try
                {
                    bytes = buffer.toString().getBytes("UTF-8");
                }
                catch(Exception e)
                {
                    throw new ParseException();
                }

                ReInit(new ByteArrayInputStream(bytes));
            }
            root = Script();
            root.validate();
        }
        catch (ParseException e)
        {
            /*
             * Check the correct error key was used.
             */
            if (Debug)
            {
                boolean foundKey = false;
                String errorKey = (e.tokenImage != null) ? "ParseError" : e.getMessage();

                for (int i=0; i<errorKeys.length; i++)
                {
                    if (errorKey.equals(errorKeys[i]))
                        foundKey = true;
                }
                if (foundKey == false)
                    System.err.println("Cannot find error key: " + errorKey);

                e.printStackTrace();
            }

            int errorLine = e.currentToken.beginLine;

            if (errorLine == 0)
                errorLine = 1;

            /* 
             * If the exception was generated by the parser then the arrays
             * of tokens encountered and tokens expected will not be null,
             * allowing them to be differentiated from exceptions reported
             * using the reportError() method.
             */
            _error = (e.tokenImage != null) ? "ParseError" : e.getMessage();
            _filename = (String)files.get(errorLine-1);
            _lineNumber = ((Integer)lines.get(errorLine-1)).intValue();
            _line = (String)codes.get(errorLine-1);

            throw e;
        }
        return root;
    }

    /**
     * Parses the file containing ActionScript. Any nested files specified
     * using #include directives are loaded before the complete script is 
     * parsed. The filenames and line numbers of #include'd scripts are 
     * tracked so any syntax errors are reported accurately.
     *
     * The character used used in the script is assumed to be UTF-8.
     *
     * @param file a File containing the ActionScript statements to parse.
     *
     * @throws ParseException if a parsing error occurs.
     */
    public ASNode parse(File file) throws ParseException
    {
        ASNode root = null;

        try
        {
            byte[] fileIn = new byte[(int)file.length()];

            FileInputStream fileContents = new FileInputStream(file);
            fileContents.read(fileIn);

            String script = new String(fileIn, "UTF-8");
            fileContents.close();

            root = parse(script);
        }
        catch (ParseException e)
        {
            _filename = file.getPath();

            throw e;
        }
        catch (FileNotFoundException e)
        {
            _error = "FileNotFound";
            _filename = file.getPath();

            throw new ParseException("FileNotFound");
        }
        catch (IOException e)
        {
            _error = "ReadError";
            _filename = file.getPath();

            throw new ParseException("ReadError");
        }
        return root;
    }

    /*
     * processDirectives is used to resolve #include directives defined in a set of 
     * ActionScript statements.
     *
     * If an error occurs when including files the name of the file, the line number
     * and the code which triggered the error is recorded. These may be retrieved
     * using the getFilename(), getLineNumber() and getLine() methods respectively.
     * Depending on the type of error either an IOException or ParseException is 
     * thrown. The exception message contains a key that identifies the exact error
     * that occurs. The key may be used in conjunction with an instance of the 
     * ResourceBundle class to generated a localized string describing the error.
     * 
     * @param fileName is the name of file from which the script was loaded or an 
     * empty string if the script was entered directly.
     * 
     * @param script a string containing the ActionScript statements to be parsed.
     * 
     * @param out a StringBuffer which will contain the 'flattened' scripts with all 
     * #include directives replaced by the contents of the file they reference.
     * 
     * @throws ParseException unless a line contains a single #include directive.
     * 
     * @throws IOException if a #included file cannot be found or an error occurs when
     * including it. 
     */
    private void processDirectives(String fileName, String script, StringBuffer out)
        throws ParseException
    {
        String[] statements = script.split("\\r?\\n|\\r\\n?");

        int currentLine = 1;
        int lineNumber = 0;

        /*
         * Boolean flags are used to signal when a directive has been found rather 
         * immediately reading the following token to process the directive. This 
         * allows a directive to be split over two lines (valid ActionScript) and 
         * still be processed correctly.
         */
        boolean includeFile = false;

        for (int i=0; i<statements.length; i++)
        {
            String line = statements[i];

            if (line.indexOf("#include") != -1 || includeFile)
            {
                /* 
                 * Split the line containing a directive into individual words 
                 */
                String[] words = line.split("\\s");

                for (int j=0; j<words.length; j++)
                {
                    String token = words[j];

                    if (token.equals("#include"))
                    {
                        includeFile = true;
                        lineNumber = currentLine;
                    }
                    else
                    {
                        if (includeFile)
                        {
                            /*
                             * #include directives can only be followed by a string literal
                             * containing the name of a file. For all practical purposes 
                             * having multiple directives on the same line is not a problem 
                             * however Macromedia's Flash reports this as an error when 
                             * encoding  Flash file, so this behaviour is maintained just to
                             * be compatible.
                             */
                            if (words.length > 2)
                                reportError("SingleDirective", fileName, lineNumber, line);

                            /*
                             * filenames must be enclosed in quotes.
                             */
                            if (token.startsWith("\"") == false || token.endsWith("\"") == false)
                                reportError("QuoteFileName", fileName, lineNumber, line);


                            /*
                             * If the contentsOfFile() method throws an IOException then 
                             * change it into a ParseException so the filename, line number
                             * and line of code that triggered the error can be cirrectly 
                             * reported.
                             */
                            try
                            {
                                String filename = token.substring(1, token.length()-1);

                                processDirectives(filename, contentsOfFile(filename), out);
                            }
                            catch (FileNotFoundException e)
                            {
                                reportError("FileNotFound", fileName, lineNumber, line);
                            }
                            catch (IOException e)
                            {
                                reportError("ReadError", fileName, lineNumber, line);
                            }
                            includeFile = false;
                        }
                    }
                }
            }
            else
            {
                out.append(line);
                out.append(separator);

                files.add(fileName);
                lines.add(new Integer(currentLine++));
                codes.add(line);
            }
        }
    }

    /*
     * reportError is used to report any errors found when processing a directive. A
     * ParseException is created containing the key which identifies the error and the 
     * line number which triggered it. The line mapping arrays are updated so that when
     * the exception is reported to the code using the parser the method: getFileName(), 
     * getLineNumber() and getLine() return the correct information.
     *
     * @param errorKey a String that idenfities the type of error that occurred.
     * @param fileName the name of the file which contains the line that triggered the error.
     * @param lineNumber the number of the line that triggered the error.
     * @param line the line of code that triggered the error.
     *
     * @throws ParseException containing the errorKey and line number.
     */
    private void reportError(String errorKey, String fileName, int lineNumber, String line) throws ParseException
    {
        ParseException parseError = new ParseException(errorKey);

        parseError.currentToken = new Token();
        parseError.currentToken.beginLine = lineNumber;

        files.add(fileName);
        lines.add(new Integer(lineNumber));
        codes.add(line);

        throw parseError;
    }

    /*
     * reportError is used to report any errors found when validating a node during parsing. A
     * ParseException is created containing the key which identifies the error and the 
     * Token which triggered it.
     *
     * @param errorKey a String that idenfities the type of error that occurred.
     * @param token the token being parsed which triggered the error.
     *
     * @throws ParseException containing the errorKey and line number.
     */
    private void reportError(String errorKey, Token token) throws ParseException
    {
        ParseException parseError = new ParseException(errorKey);

        parseError.currentToken = token;

        throw parseError;
    }

    /*
     * reportError is used to report any errors found when validating a node. A
     * ParseException is created containing the key which identifies the error and the 
     * Token which triggered it.
     *
     * @param errorKey a String that idenfities the type of error that occurred.
     * @param number the number of the line or token that triggered the error.
     *
     * @throws ParseException containing the errorKey and line number.
     */
    private void reportError(String errorKey, int number) throws ParseException
    {
        ParseException parseError = new ParseException(errorKey);

        parseError.currentToken = new Token();
        parseError.currentToken.beginLine = number;

        throw parseError;
    }

    /*
     * Returns the contents of the file as a single string. The list of directories
     * in the pathNames attribute is searched for the file.
     * 
     * @param fileName the name of the file to read.
     * 
     * @return a String containing the contents of the file.
     * 
     * @throws FileNotFoundException if the file could not be found.
     * @throws IOException if an error occurred while reading the file.
     */
    private String contentsOfFile(String fileName) throws FileNotFoundException, IOException
    {
        String script = "";

        boolean fileFound = false;

        for (Iterator i = pathNames.iterator(); i.hasNext();)
        {
            File aFile = new File((String)i.next() + File.separator + fileName);

            if (aFile.exists())
            {
                byte[] fileIn = new byte[(int)aFile.length()];

                FileInputStream fileContents = new FileInputStream(aFile);
                fileContents.read(fileIn);

                script = new String(fileIn);

                fileContents.close();
                fileFound = true;
            }
        }

        if (fileFound == false)
            throw new FileNotFoundException();

        return script;
    }

  final public ASNode Literal() throws ParseException {
                     Token t; ASNode node = new ASNode(ASNode.Value);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
        node.setType(ASNode.BooleanLiteral);
        if (t.image.toLowerCase().equals("true"))
            node.setBoolValue(true);
        else if (t.image.toLowerCase().equals("false"))
            node.setBoolValue(false);
        {if (true) return node;}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
        Integer i;
        boolean negative = false;

        try {
            if (token.image.toLowerCase().startsWith("0x"))
            {
                i = Integer.valueOf(t.image.substring(2), 16);
            }
            else
            {
                if (token.image.startsWith("+")) {
                    i = Integer.valueOf(token.image.substring(1));
                }
                else if (token.image.startsWith("-")) {
                    i = Integer.valueOf(token.image.substring(1));
                    negative = true;
                }
                else {
                    i = Integer.valueOf(token.image);
                }
            }
        }
        catch (NumberFormatException e) {
            i = new Integer(0);
        }
        node.setType(ASNode.IntegerLiteral);
        node.setIntValue(negative ? -i.intValue() : i.intValue());
        {if (true) return node;}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
        Double d;

        try {
            if (token.image.endsWith("e"))
                d = Double.valueOf(token.image+"0");
            else
                d = Double.valueOf(token.image);
        }
        catch (NumberFormatException e) {
            d = new Double(0);
        }
        node.setType(ASNode.DoubleLiteral);
        node.setDoubleValue(d.doubleValue());
        {if (true) return node;}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
        node.setType(ASNode.StringLiteral);
        node.setStringValue(t.image.substring(1, t.image.length()-1));
        {if (true) return node;}
      break;
    case NULL_LITERAL:
      t = jj_consume_token(NULL_LITERAL);
        node.setType(ASNode.NullLiteral);
        {if (true) return node;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASNode Identifier() throws ParseException {
                        Token t; ASNode node = null;
    if (jj_2_1(2147483647)) {
      t = jj_consume_token(IDENTIFIER);
      node = Function();
          node.setStringValue(t.image);
          node.setNumber(t.beginLine);
          {if (true) return node;}
    } else if (jj_2_2(2147483647)) {
      t = jj_consume_token(IDENTIFIER);
          node = new ASNode(ASNode.Identifier, t.image);
          {if (true) return node;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Statements
 */
  final public ASNode Script() throws ParseException {
                    ASNode root = new ASNode(ASNode.Array), node = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case LOGICAL_NOT:
      case BIT_NOT:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case IF:
      case WHILE:
      case DO:
      case FOR:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case RETURN:
      case WITH:
      case NEW:
      case FUNCTION:
      case VAR:
      case ONCLIPEVENT:
      case ON:
      case TRY:
      case THROW:
      case SWITCH:
      case IDENTIFIER:
      case 90:
      case 92:
      case 94:
      case 98:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      node = Statement();
            if (node.getType() == ASNode.OnClipEvent)
                root.setType(ASNode.MovieClip);
            else if (node.getType() == ASNode.On)
                root.setType(ASNode.Button);

            root.setNumber(token.beginLine);
              root.add(node);
    }
      {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode Statement() throws ParseException {
                       ASNode node = null;
    if (jj_2_3(2147483647)) {
      node = BlockStatement();
                                                          {if (true) return node;}
    } else if (jj_2_4(2147483647)) {
      node = FunctionDefinition();
                                                                  {if (true) return node;}
    } else if (jj_2_5(2147483647)) {
      node = ExpressionStatement();
                                                                    {if (true) return node;}
    } else if (jj_2_6(2147483647)) {
      node = IfStatement();
                                                    {if (true) return node;}
    } else if (jj_2_7(2147483647)) {
      node = WithStatement();
                                                        {if (true) return node;}
    } else if (jj_2_8(2147483647)) {
      node = WhileStatement();
                                                          {if (true) return node;}
    } else if (jj_2_9(2147483647)) {
      node = DoStatement();
                                                    {if (true) return node;}
    } else if (jj_2_10(2147483647)) {
      node = ForStatement();
                                                      {if (true) return node;}
    } else if (jj_2_11(2147483647)) {
      node = BreakStatement();
                                                          {if (true) return node;}
    } else if (jj_2_12(2147483647)) {
      node = ContinueStatement();
                                                                {if (true) return node;}
    } else if (jj_2_13(2147483647)) {
      node = ReturnStatement();
                                                            {if (true) return node;}
    } else if (jj_2_14(2147483647)) {
      node = OnClipEvent();
                                                    {if (true) return node;}
    } else if (jj_2_15(2147483647)) {
      node = On();
                                  {if (true) return node;}
    } else if (jj_2_16(2147483647)) {
      node = TryStatement();
                                                      {if (true) return node;}
    } else if (jj_2_17(2147483647)) {
      node = ThrowStatement();
                                                          {if (true) return node;}
    } else if (jj_2_18(2147483647)) {
      node = SwitchStatement();
                                                            {if (true) return node;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASNode FunctionDefinition() throws ParseException {
                                Token t; ASNode node = new ASNode(ASNode.DefineFunction), name = null, args = null, body = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      jj_consume_token(FUNCTION);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                  node.setStringValue(t.image);
    jj_consume_token(90);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case LOGICAL_NOT:
    case BIT_NOT:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case DELETE:
    case NEW:
    case FUNCTION:
    case IDENTIFIER:
    case 90:
    case 92:
    case 98:
      args = ArgumentList();
                                                                                              node.add(args);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(91);
    body = BlockStatement();
                                                                                                                                              node.add(body);
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode BlockStatement() throws ParseException {
                            ASNode list = new ASNode(ASNode.StatementList), node = null;
    jj_consume_token(92);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case LOGICAL_NOT:
      case BIT_NOT:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case IF:
      case WHILE:
      case DO:
      case FOR:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case RETURN:
      case WITH:
      case NEW:
      case FUNCTION:
      case VAR:
      case ONCLIPEVENT:
      case ON:
      case TRY:
      case THROW:
      case SWITCH:
      case IDENTIFIER:
      case 90:
      case 92:
      case 94:
      case 98:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      node = Statement();
                             list.add(node);
    }
    jj_consume_token(93);
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode ExpressionStatement() throws ParseException {
                                 Token t; ASNode node = new ASNode(ASNode.NoOp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case LOGICAL_NOT:
    case BIT_NOT:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case DELETE:
    case NEW:
    case FUNCTION:
    case VAR:
    case IDENTIFIER:
    case 90:
    case 92:
    case 98:
      node = ExpressionList();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(94);
                                    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode IfStatement() throws ParseException {
                         Token t; ASNode ifnode = new ASNode(ASNode.If), node = null;  ifnode.add(new ASNode(ASNode.NoOp));
    t = jj_consume_token(IF);
    jj_consume_token(90);
    node = ConditionalExpression();
    jj_consume_token(91);
                                                  ifnode.set(0, node);
    node = Statement();
                           ifnode.add(node);
    if (jj_2_19(2)) {
      jj_consume_token(ELSE);
      node = Statement();
                                                 ifnode.add(node);
    } else {
      ;
    }
      {if (true) return ifnode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode WithStatement() throws ParseException {
                           ASNode withNode = new ASNode(ASNode.With), node = null;
    jj_consume_token(WITH);
    jj_consume_token(90);
    node = ConditionalExpression();
    jj_consume_token(91);
                                                  withNode.add(node);
    node = Statement();
                           withNode.add(node);
      {if (true) return withNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode WhileStatement() throws ParseException {
                            ASNode whileNode = new ASNode(ASNode.While), node = null; whileNode.add(new ASNode(ASNode.NoOp));
    jj_consume_token(WHILE);
    jj_consume_token(90);
    node = ConditionalExpression();
    jj_consume_token(91);
                                                   whileNode.set(0, node);
    node = Statement();
                           whileNode.add(node);
      {if (true) return whileNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode DoStatement() throws ParseException {
                         ASNode doNode = new ASNode(ASNode.Do), node = null; doNode.add(new ASNode(ASNode.NoOp));
    jj_consume_token(DO);
    node = Statement();
                            doNode.set(0, node);
    jj_consume_token(WHILE);
    jj_consume_token(90);
    node = ConditionalExpression();
    jj_consume_token(91);
    jj_consume_token(94);
                                                       doNode.add(node);
      {if (true) return doNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode ForStatement() throws ParseException {
                          Token t; ASNode forNode = null, node = null;
    if (jj_2_20(5)) {
      jj_consume_token(FOR);
              forNode = new ASNode(ASNode.For);
              forNode.add(new ASNode(ASNode.NoOp));
              forNode.add(new ASNode(ASNode.NoOp));
              forNode.add(new ASNode(ASNode.NoOp));
              forNode.add(new ASNode(ASNode.NoOp));
      jj_consume_token(90);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case LOGICAL_NOT:
      case BIT_NOT:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case DELETE:
      case NEW:
      case FUNCTION:
      case VAR:
      case IDENTIFIER:
      case 90:
      case 92:
      case 98:
        node = ExpressionList();
                                    forNode.set(0, node);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case LOGICAL_NOT:
      case BIT_NOT:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case DELETE:
      case NEW:
      case FUNCTION:
      case IDENTIFIER:
      case 90:
      case 92:
      case 98:
        node = ConditionalExpression();
                                           forNode.set(1, node);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case LOGICAL_NOT:
      case BIT_NOT:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case DELETE:
      case NEW:
      case FUNCTION:
      case VAR:
      case IDENTIFIER:
      case 90:
      case 92:
      case 98:
        node = ExpressionList();
                                    forNode.set(2, node);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(91);
      node = Statement();
                             forNode.set(3, node); {if (true) return forNode;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        jj_consume_token(FOR);
              forNode = new ASNode(ASNode.ForIn);
        jj_consume_token(90);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          jj_consume_token(VAR);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        t = jj_consume_token(IDENTIFIER);
                                   forNode.add(new ASNode(ASNode.Identifier, t.image));
        jj_consume_token(IN);
        node = ConditionalExpression();
        jj_consume_token(91);
                                                   forNode.add(node);
        node = Statement();
                             forNode.add(node); {if (true) return forNode;}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASNode BreakStatement() throws ParseException {
                            Token t; ASNode node = new ASNode(ASNode.Break);
    t = jj_consume_token(BREAK);
    jj_consume_token(94);
        node.setNumber(t.beginLine);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode ContinueStatement() throws ParseException {
                               Token t; ASNode node = new ASNode(ASNode. Continue);
    t = jj_consume_token(CONTINUE);
    jj_consume_token(94);
        node.setNumber(t.beginLine);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode ReturnStatement() throws ParseException {
                             Token t; ASNode returnNode = new ASNode(ASNode.Return), node = null;
    t = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case LOGICAL_NOT:
    case BIT_NOT:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case DELETE:
    case NEW:
    case FUNCTION:
    case IDENTIFIER:
    case 90:
    case 92:
    case 98:
      node = ConditionalExpression();
                                                returnNode.add(node);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(94);
        returnNode.setNumber(t.beginLine);
        {if (true) return returnNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode OnClipEvent() throws ParseException {
                         Token t; ASNode eventNode = new ASNode(ASNode.OnClipEvent), node = null;
    t = jj_consume_token(ONCLIPEVENT);
    jj_consume_token(90);
    node = Identifier();
        if (node.getType() == ASNode.Identifier)
        {
            if (ASNode.clipEvents.containsKey(node.getStringValue()))
            {
                int eventCode = ((Integer)ASNode.clipEvents.get(node.getStringValue())).intValue();

                eventNode.setIntValue(eventCode);
            }
            else
            {
                reportError("UnknownMovieClipEvent", t);
            }
        }
        else
        {
            reportError("UnknownMovieClipEvent", t);
        }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      jj_consume_token(95);
      node = Identifier();
        if (node.getType() == ASNode.Identifier)
        {
            if (ASNode.clipEvents.containsKey(node.getStringValue()))
            {
                int allEvents = eventNode.getIntValue();
                int event = ((Integer)ASNode.clipEvents.get(node.getStringValue())).intValue();

                eventNode.setIntValue(allEvents + event);
            }
            else
            {
                reportError("UnknownMovieClipEvent", t);
            }
        }
        else
        {
            reportError("UnknownMovieClipEvent", t);
        }
    }
    jj_consume_token(91);
    node = Statement();
                              eventNode.add(node);
      {if (true) return eventNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode On() throws ParseException {
                Token t; ASNode eventNode = new ASNode(ASNode.On), node = null;
    t = jj_consume_token(ON);
    jj_consume_token(90);
    if (jj_2_21(2)) {
      node = Identifier();
      node = Literal();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        node = Identifier();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if (node.getType() == ASNode.Identifier)
        {
            if (ASNode.buttonEvents.containsKey(node.getStringValue()))
            {
                int event = ((Integer)ASNode.buttonEvents.get(node.getStringValue())).intValue();
                eventNode.setIntValue(event);
            }
            else
            {
                reportError("UnknownButtonEvent", t);
            }
        }
        else if (node.getType() == ASNode.StringLiteral)
        {
            String key = node.getStringValue();
            int event = 0;

            if (ASNode.buttonEvents.containsKey(key))
            {
                event = ((Integer)ASNode.buttonEvents.get(key)).intValue();
            }
            else
            {
                event = key.charAt(0) << 9;
            }
            eventNode.setIntValue(event);
        }
        else
        {
            reportError("UnknownButtonEvent", t);
        }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      jj_consume_token(95);
      if (jj_2_22(2)) {
        node = Identifier();
        node = Literal();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          node = Identifier();
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        if (node.getType() == ASNode.Identifier)
        {
            if (ASNode.buttonEvents.containsKey(node.getStringValue()))
            {
                int allEvents = eventNode.getIntValue();
                int event = ((Integer)ASNode.buttonEvents.get(node.getStringValue())).intValue();

                eventNode.setIntValue(allEvents + event);
            }
            else
            {
                reportError("UnknownButtonEvent", t);
            }
        }
        else if (node.getType() == ASNode.StringLiteral)
        {
            String key = node.getStringValue();
            int allEvents = eventNode.getIntValue();
            int event = 0;

            if (ASNode.buttonEvents.containsKey(key))
            {
                event = ((Integer)ASNode.buttonEvents.get(key)).intValue();
            }
            else
            {
                event = key.charAt(0) << 9;
            }
            eventNode.setIntValue(allEvents + event);
        }
        else
        {
            reportError("UnknownButtonEvent", t);
        }
    }
    jj_consume_token(91);
    node = Statement();
                           eventNode.add(node);
      {if (true) return eventNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode TryStatement() throws ParseException {
                          ASNode exceptionNode = new ASNode(ASNode.Exception), node = null, catchNode = null;
    jj_consume_token(TRY);
    node = Statement();
                           ASNode tryNode = new ASNode(ASNode.Try); tryNode.add(node); exceptionNode.add(tryNode);
    label_5:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(CATCH);
      jj_consume_token(90);
      node = ConditionalExpression();
      jj_consume_token(91);
                                                                  catchNode = new ASNode(ASNode.Catch); exceptionNode.add(catchNode);
      node = Statement();
                           catchNode.add(node);
    }
    if (jj_2_24(2)) {
      jj_consume_token(FINALLY);
      node = Statement();
                           ASNode finallyNode = new ASNode(ASNode.Finally); finallyNode.add(node); exceptionNode.add(finallyNode);
    } else {
      ;
    }
      {if (true) return exceptionNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode ThrowStatement() throws ParseException {
                            Token t; ASNode throwNode = new ASNode(ASNode.Throw), node = null;
    jj_consume_token(THROW);
    node = ConditionalExpression();
                                           throwNode.add(node);
    jj_consume_token(94);
      {if (true) return throwNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode SwitchStatement() throws ParseException {
                             ASNode switchNode = new ASNode(ASNode.Switch), label = null, list = null, node = null;
    jj_consume_token(SWITCH);
    jj_consume_token(90);
    node = ConditionalExpression();
    jj_consume_token(91);
                                                    switchNode.add(node);
    jj_consume_token(92);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULT_CASE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      label = SwitchLabel();
                               switchNode.add(label); list = new ASNode (ASNode.List);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN_LITERAL:
        case NULL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case LOGICAL_NOT:
        case BIT_NOT:
        case PLUS:
        case MINUS:
        case INC:
        case DEC:
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case BREAK:
        case CONTINUE:
        case DELETE:
        case RETURN:
        case WITH:
        case NEW:
        case FUNCTION:
        case VAR:
        case ONCLIPEVENT:
        case ON:
        case TRY:
        case THROW:
        case SWITCH:
        case IDENTIFIER:
        case 90:
        case 92:
        case 94:
        case 98:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        node = Statement();
                                                                                                            list.add(node);
      }
                                                                                                                                   if (list.count() > 0) switchNode.add(list);
    }
    jj_consume_token(93);
      {if (true) return switchNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode SwitchLabel() throws ParseException {
                         ASNode labelNode = new ASNode(ASNode.Label), node = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      node = Expression();
      jj_consume_token(96);
                                     labelNode.add(node);
      break;
    case DEFAULT_CASE:
      jj_consume_token(DEFAULT_CASE);
      jj_consume_token(96);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return labelNode;}
    throw new Error("Missing return statement in function");
  }

/*
 * Define lists
 */
  final public ASNode ExpressionList() throws ParseException {
                            ASNode block = new ASNode(ASNode.List), node = null;
    node = Expression();
                        block.add(node);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      jj_consume_token(95);
      node = Expression();
                                                                     block.add(node);
    }
        if (block.count() == 1)
            {if (true) return block.get(0);}
        else
            {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode ArgumentList() throws ParseException {
                          ASNode block = new ASNode(ASNode.List), node = null;
    node = ConditionalExpression();
                                   block.add(node);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      jj_consume_token(95);
      node = ConditionalExpression();
                                                                                           block.add(node);
    }
        if (block.count() == 1)
            {if (true) return block.get(0);}
        else
            {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression Syntax
 */
  final public ASNode Expression() throws ParseException {
                        ASNode node = null;
    node = AssignmentExpression();
                                    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode AssignmentExpression() throws ParseException {
                                  boolean isVar = false; int type = 0; ASNode node = null, left = null, right = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
              isVar = true;
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    node = ConditionalExpression();
                                                                  if (isVar) node.setType(ASNode.DefineVariable);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case ASSIGN_ADD:
    case ASSIGN_SUB:
    case ASSIGN_MUL:
    case ASSIGN_DIV:
    case ASSIGN_MOD:
    case ASSIGN_LSL:
    case ASSIGN_ASR:
    case ASSIGN_LSR:
    case ASSIGN_AND:
    case ASSIGN_OR:
    case ASSIGN_XOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
                     type = ASNode.Assign;
        break;
      case ASSIGN_ADD:
        jj_consume_token(ASSIGN_ADD);
                         type = ASNode.AssignAdd;
        break;
      case ASSIGN_SUB:
        jj_consume_token(ASSIGN_SUB);
                         type = ASNode.AssignSub;
        break;
      case ASSIGN_MUL:
        jj_consume_token(ASSIGN_MUL);
                         type = ASNode.AssignMul;
        break;
      case ASSIGN_DIV:
        jj_consume_token(ASSIGN_DIV);
                         type = ASNode.AssignDiv;
        break;
      case ASSIGN_MOD:
        jj_consume_token(ASSIGN_MOD);
                         type = ASNode.AssignMod;
        break;
      case ASSIGN_LSL:
        jj_consume_token(ASSIGN_LSL);
                         type = ASNode.AssignLSL;
        break;
      case ASSIGN_ASR:
        jj_consume_token(ASSIGN_ASR);
                         type = ASNode.AssignASR;
        break;
      case ASSIGN_LSR:
        jj_consume_token(ASSIGN_LSR);
                         type = ASNode.AssignLSR;
        break;
      case ASSIGN_AND:
        jj_consume_token(ASSIGN_AND);
                         type = ASNode.AssignBitAnd;
        break;
      case ASSIGN_OR:
        jj_consume_token(ASSIGN_OR);
                        type = ASNode.AssignBitOr;
        break;
      case ASSIGN_XOR:
        jj_consume_token(ASSIGN_XOR);
                         type = ASNode.AssignBitXOr;
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = AssignmentExpression();
            node = new ASNode(type, node, right);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/*
 * The following nodes describe a binary tree which are used to parse expressions containing 
 * the different types of operators. The left branch of the tree descends down one level.
 * The right branch parses the remaining part of the expression starting at the same level. 
 * This allows statements such as a + b * c to be correctly parsed as a + (b * c) which takes
 * into account the level of precendence assigned to different operations. If the right brach 
 * also descended down the tree then the expression would be parsed as (a + b) * c.
 */
  final public ASNode ConditionalExpression() throws ParseException {
                                   ASNode node = null, cond = null, a = null, b = null;
    node = LogicalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 97:
      jj_consume_token(97);
      a = Expression();
      jj_consume_token(96);
      b = ConditionalExpression();
          cond = node;
          node = new ASNode(ASNode.Select);
          node.add(cond);
          node.add(a);
          node.add(b);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode LogicalOrExpression() throws ParseException {
                                 int type = 0; ASNode left = null, right = null;
    left = LogicalAndExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_OR:
      case OR:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_OR:
        jj_consume_token(LOGICAL_OR);
                         type = ASNode.LogicalOr;
        break;
      case OR:
        jj_consume_token(OR);
                 type = ASNode.Or;
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = LogicalAndExpression();
          left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode LogicalAndExpression() throws ParseException {
                                  int type = 0; ASNode left = null, right = null;
    left = InclusiveOrExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_AND:
      case AND:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_AND:
        jj_consume_token(LOGICAL_AND);
                          type = ASNode.LogicalAnd;
        break;
      case AND:
        jj_consume_token(AND);
                  type = ASNode.And;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = InclusiveOrExpression();
          left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode InclusiveOrExpression() throws ParseException {
                                   int type = 0; ASNode left = null, right = null;
    left = ExclusiveOrExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_12;
      }
      jj_consume_token(BIT_OR);
                   type = ASNode.BitOr;
      right = ExclusiveOrExpression();
          left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode ExclusiveOrExpression() throws ParseException {
                                   int type = 0; ASNode left = null, right = null;
    left = AndExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_XOR:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_13;
      }
      jj_consume_token(BIT_XOR);
                    type = ASNode.BitXOr;
      right = AndExpression();
          left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode AndExpression() throws ParseException {
                           int type = 0; ASNode left = null, right = null;
    left = EqualityExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_14;
      }
      jj_consume_token(BIT_AND);
                    type = ASNode.BitAnd;
      right = EqualityExpression();
          left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode EqualityExpression() throws ParseException {
                                int type = 0; ASNode left = null, right = null;
    left = RelationalExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case STRICT_EQ:
      case STRICT_NEQ:
      case STRING_EQ:
      case STRING_NEQ:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                 type = ASNode.Equal;
        break;
      case NE:
        jj_consume_token(NE);
                 type = ASNode.NotEqual;
        break;
      case STRICT_EQ:
        jj_consume_token(STRICT_EQ);
                        type = ASNode.StrictEqual;
        break;
      case STRICT_NEQ:
        jj_consume_token(STRICT_NEQ);
                         type = ASNode.StrictNotEqual;
        break;
      case STRING_EQ:
        jj_consume_token(STRING_EQ);
                        type = ASNode.StringEqual;
        break;
      case STRING_NEQ:
        jj_consume_token(STRING_NEQ);
                         type = ASNode.StringNotEqual;
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = RelationalExpression();
          left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode RelationalExpression() throws ParseException {
                                  int type = 0; ASNode left = null, right = null;
    left = InstanceExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case GTE:
      case LTE:
      case STRING_LE:
      case STRING_GT:
      case STRING_GE:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
                 type = ASNode.LessThan;
        break;
      case GT:
        jj_consume_token(GT);
                 type = ASNode.GreaterThan;
        break;
      case LTE:
        jj_consume_token(LTE);
                  type = ASNode.LessThanEqual;
        break;
      case GTE:
        jj_consume_token(GTE);
                  type = ASNode.GreaterThanEqual;
        break;
      case STRING_GT:
        jj_consume_token(STRING_GT);
                        type = ASNode.StringGreaterThan;
        break;
      case STRING_LE:
        jj_consume_token(STRING_LE);
                        type = ASNode.StringLessThanEqual;
        break;
      case STRING_GE:
        jj_consume_token(STRING_GE);
                        type = ASNode.StringGreaterThanEqual;
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = InstanceExpression();
          left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode InstanceExpression() throws ParseException {
                                int type = 0; ASNode left = null, right = null;
    left = ShiftExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_17;
      }
      jj_consume_token(INSTANCEOF);
                         type = ASNode.InstanceOf;
      right = ShiftExpression();
         left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode ShiftExpression() throws ParseException {
                             int type = 0; ASNode left = null, right = null;
    left = AdditiveExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSL:
      case LSR:
      case ASR:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSL:
        jj_consume_token(LSL);
                  type = ASNode.LSL;
        break;
      case LSR:
        jj_consume_token(LSR);
                  type = ASNode.LSR;
        break;
      case ASR:
        jj_consume_token(ASR);
                  type = ASNode.ASR;
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = AdditiveExpression();
          left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode AdditiveExpression() throws ParseException {
                                int type = 0; ASNode left = null, right = null;
    left = MultiplicativeExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case ADD:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                   type = ASNode.Add;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                    type = ASNode.Sub;
        break;
      case ADD:
        jj_consume_token(ADD);
                  type = ASNode.StringAdd;
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = MultiplicativeExpression();
         left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode MultiplicativeExpression() throws ParseException {
                                      int type = 0; ASNode left = null, right = null;
    left = UnaryExpression();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MOD:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
                       type = ASNode.Mul;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
                     type = ASNode.Div;
        break;
      case MOD:
        jj_consume_token(MOD);
                  type = ASNode.Mod;
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = UnaryExpression();
         left = new ASNode(type, left, right);
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode UnaryExpression() throws ParseException {
                             int type = 0; ASNode node = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                 type = ASNode.Plus;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                   type = ASNode.Minus;
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      node = UnaryExpression();
        {if (true) return new ASNode(type, node);}
      break;
    case INC:
    case DEC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        jj_consume_token(INC);
                type = ASNode.PreInc;
        break;
      case DEC:
        jj_consume_token(DEC);
                                                  type = ASNode.PreDec;
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      node = PrimaryExpression();
        {if (true) return new ASNode(type, node);}
      break;
    case LOGICAL_NOT:
    case BIT_NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_NOT:
        jj_consume_token(BIT_NOT);
                    type = ASNode.BitNot;
        break;
      case LOGICAL_NOT:
        jj_consume_token(LOGICAL_NOT);
                                                              type = ASNode.Not;
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      node = UnaryExpression();
        {if (true) return new ASNode(type, node);}
      break;
    case DELETE:
      jj_consume_token(DELETE);
                 type = ASNode.Delete;
      node = UnaryExpression();
        {if (true) return new ASNode(type, node);}
      break;
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case NEW:
    case FUNCTION:
    case IDENTIFIER:
    case 90:
    case 92:
    case 98:
      node = PostfixExpression();
                                 {if (true) return node;}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASNode PostfixExpression() throws ParseException {
                               int type = 0; ASNode node = null;
    node = PrimaryExpression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
      case DEC:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        jj_consume_token(INC);
                  type = ASNode.PostInc;
        break;
      case DEC:
        jj_consume_token(DEC);
                  type = ASNode.PostDec;
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            node = new ASNode(type, node);
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/*
 * Primary expressions are split into a prefix/suffix pair. This allows some of the more 
 * esoteric features of ActionScript to be handled cleanly, specifically variables and 
 * array elments can contain objects and even functions. The statement a[1](arg) is 
 * valid ActionScript - the first element of the array contains a function which is 
 * executed passing the argument, arg.
 *
 * Suffixing also allows object path names, e.g. a.b.c() to be correctly parsed.
 *
 * IMPORTANT: The Identifier() node looks ahead to see whether the indentifier is 
 * actually the name of a function. The node looksahead to see if the identifier 
 * token is followed by a Function() node. If so the tokens are consumed.
 */
  final public ASNode PrimaryExpression() throws ParseException {
                               ASNode list = new ASNode(ASNode.Value), node = null;
    node = PrimaryPrefix();
                           list.add(node);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 90:
      case 98:
      case 100:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_22;
      }
      node = PrimarySuffix();
                                                                      list.add(node);
    }
        if (list.count() == 1)
            {if (true) return list.get(0);}
        else
            {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode PrimaryPrefix() throws ParseException {
                           ASNode node = null;
    if (jj_2_25(6)) {
      node = AnonymousArray();
                              {if (true) return node;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        node = AnonymousObject();
                               {if (true) return node;}
        break;
      case FUNCTION:
        node = MethodDefinition();
                                {if (true) return node;}
        break;
      case NEW:
        node = Constructor();
                           {if (true) return node;}
        break;
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        node = Literal();
                       {if (true) return node;}
        break;
      case IDENTIFIER:
        node = Identifier();
                          {if (true) return node;}
        break;
      case 90:
        jj_consume_token(90);
        node = ConditionalExpression();
        jj_consume_token(91);
                                             {if (true) return node;}
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASNode PrimarySuffix() throws ParseException {
                           Token t; ASNode node = null, name = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 98:
      jj_consume_token(98);
      node = ConditionalExpression();
      jj_consume_token(99);
        {if (true) return new ASNode(ASNode.Subscript, node);}
      break;
    default:
      jj_la1[51] = jj_gen;
      if (jj_2_26(2147483647)) {
        jj_consume_token(100);
        t = jj_consume_token(IDENTIFIER);
        node = Function();
        node.setType(ASNode.Method); node.setStringValue(t.image); {if (true) return node;}
      } else if (jj_2_27(2147483647)) {
        jj_consume_token(100);
        t = jj_consume_token(IDENTIFIER);
        node = new ASNode(ASNode.Attribute); node.setStringValue(t.image); {if (true) return node;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 90:
          node = Function();
        {if (true) return node;}
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASNode Function() throws ParseException {
                      ASNode node = new ASNode(ASNode.Function, ""), arg = null;
    jj_consume_token(90);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case LOGICAL_NOT:
    case BIT_NOT:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case DELETE:
    case NEW:
    case FUNCTION:
    case IDENTIFIER:
    case 90:
    case 92:
    case 98:
      arg = ConditionalExpression();
                                        node.add(arg);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_23;
        }
        jj_consume_token(95);
        arg = ConditionalExpression();
                                                                                             node.add(arg);
      }
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(91);
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode Constructor() throws ParseException {
                         Token t; ASNode node = new ASNode(ASNode.NewObject), arg = null;
    jj_consume_token(NEW);
    if (jj_2_28(2147483647)) {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(90);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case LOGICAL_NOT:
      case BIT_NOT:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case DELETE:
      case NEW:
      case FUNCTION:
      case IDENTIFIER:
      case 90:
      case 92:
      case 98:
        arg = ConditionalExpression();
                                                                                       node.add(arg);
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 95:
            ;
            break;
          default:
            jj_la1[55] = jj_gen;
            break label_24;
          }
          jj_consume_token(95);
          arg = ConditionalExpression();
                                                                                                                                            node.add(arg);
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(91);
    } else if (jj_2_29(2147483647)) {
      t = jj_consume_token(IDENTIFIER);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      node.setStringValue(t.image); {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode AnonymousArray() throws ParseException {
                            ASNode node = new ASNode(ASNode.DefineArray), element = null;
    jj_consume_token(98);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case LOGICAL_NOT:
    case BIT_NOT:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case DELETE:
    case NEW:
    case FUNCTION:
    case IDENTIFIER:
    case 90:
    case 92:
    case 98:
      element = ConditionalExpression();
                                            node.add(element);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_25;
        }
        jj_consume_token(95);
        element = ConditionalExpression();
                                                node.add(element);
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(99);
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode MethodDefinition() throws ParseException {
                              ASNode node = new ASNode(ASNode.DefineMethod), args = null, body = null;
    jj_consume_token(FUNCTION);
    jj_consume_token(90);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case LOGICAL_NOT:
    case BIT_NOT:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case DELETE:
    case NEW:
    case FUNCTION:
    case IDENTIFIER:
    case 90:
    case 92:
    case 98:
      args = ArgumentList();
                                           node.add(args);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    jj_consume_token(91);
    body = BlockStatement();
                                                                                           node.add(body);
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode AnonymousObject() throws ParseException {
                             ASNode node = new ASNode(ASNode.DefineObject), attribute = null;
    jj_consume_token(92);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      attribute = Attribute();
                                  node.add(attribute);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_26;
        }
        jj_consume_token(95);
        attribute = Attribute();
                                                                                       node.add(attribute);
      }
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(93);
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASNode Attribute() throws ParseException {
                       ASNode key = null, value = null;
    key = Identifier();
    jj_consume_token(96);
    value = ConditionalExpression();
      {if (true) return new ASNode(ASNode.DefineAttribute, key, value);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(91)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(LOGICAL_NOT)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_3R_176()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(ON)) return true;
    if (jj_scan_token(90)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(91)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_172()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(BIT_NOT)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_155()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_156()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(ONCLIPEVENT)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(91)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    }
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(ASR)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(LSR)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(LSL)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(90)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_139()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(STRING_GE)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(STRING_LE)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(STRING_GT)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(GTE)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(LTE)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(90)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_131()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(STRING_NEQ)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(STRING_EQ)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(STRICT_NEQ)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(STRICT_EQ)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(BIT_XOR)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(92)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(90)) return true;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(96)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(ASSIGN_XOR)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(ASSIGN_OR)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(ASSIGN_AND)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(ASSIGN_LSR)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(ASSIGN_ASR)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(ASSIGN_LSL)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(ASSIGN_MOD)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(ASSIGN_DIV)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(ASSIGN_MUL)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(ASSIGN_SUB)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(ASSIGN_ADD)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(NULL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(DEFAULT_CASE)) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_scan_token(92)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(96)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_198()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(92)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(90)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(98)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(90)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(100)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(100)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(90)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(100)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(95)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(100)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(98)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(99)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    }
    }
    return false;
  }

  public ASParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xa700,0xa700,0x0,0xa700,0xa700,0xa700,0xa700,0xa700,0xa700,0x0,0x0,0xa700,0x0,0x0,0x0,0x0,0x0,0xa700,0x0,0x0,0x0,0x0,0x3ffc0000,0x3ffc0000,0x0,0x80000000,0x80000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa700,0x0,0x0,0x0,0xa700,0x0,0x0,0x0,0xa700,0x0,0xa700,0x0,0xa700,0xa700,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x8018c401,0x0,0x18c401,0x8018c401,0x18c401,0x18c401,0x18c401,0x18c401,0x0,0x0,0x18c401,0x0,0x0,0x0,0x0,0x0,0x8018c401,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x1000000,0x1000000,0x100,0x200,0x80,0xc600042,0xc600042,0x7000003c,0x7000003c,0x0,0x3800,0x3800,0x80c000,0x80c000,0x70000,0x70000,0xc000,0x180000,0x401,0x18c401,0x180000,0x180000,0x0,0x0,0x0,0x0,0x0,0x18c401,0x0,0x18c401,0x0,0x18c401,0x18c401,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x5499feee,0x1000,0x14801880,0x5499feee,0x14803880,0x14803880,0x14801880,0x14803880,0x2000,0x8,0x14801880,0x80000000,0x800000,0x80000000,0x800000,0x600000,0x5499feee,0x600000,0x80000000,0x80000000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14801880,0x0,0x0,0x4000000,0x14801800,0x0,0x4000000,0x80000000,0x14801880,0x80000000,0x14801880,0x80000000,0x14801880,0x14801880,0x80000000,0x800000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x4,0x0,0x4,0x4,0x4,0x4,0x4,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x14,0x0,0x4,0x0,0x0,0x4,0x0,0x4,0x0,0x4,0x4,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[29];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ASParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ASParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ASParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ASParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ASParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ASParser(ASParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ASParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[101];
    for (int i = 0; i < 101; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 62; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 101; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 29; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
